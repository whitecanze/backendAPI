let fs,path,ApolloServer,resolvers,getUser;_6a8‍.x([["default",()=>_6a8‍.o]]);_6a8‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_6a8‍.w("path",[["default",["path"],function(v){path=v}]]);_6a8‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_6a8‍.w("./resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_6a8‍.w("./utils/getUser",[["default",["getUser"],function(v){getUser=v}]]);


// import typeDefs from './schema/typeDefs'



const typeDefs = fs.readFileSync(path.join(__dirname,"./schema","schema.graphql"),"utf8").toString()

const server = new ApolloServer({
    typeDefs,
    resolvers,
    context: ({ req }) => {
        // Check token from headers
        const token = req.headers.authorization || ''

        // Extract userId from token
        const userId = getUser(token)
        // console.log('User id -->',userId)
        return { userId }
    }
})

_6a8‍.d(server);